diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/configuration/LegacyConfigurationStrategyImpl.java b/cas-client-core/src/main/java/org/jasig/cas/client/configuration/LegacyConfigurationStrategyImpl.java
index a9af77c..6c96b47 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/configuration/LegacyConfigurationStrategyImpl.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/configuration/LegacyConfigurationStrategyImpl.java
@@ -36,18 +36,26 @@
 
     private final JndiConfigurationStrategyImpl jndiConfigurationStrategy = new JndiConfigurationStrategyImpl();
 
+    private final PropertiesConfigurationStrategyImpl propertiesConfigurationStrategy = new PropertiesConfigurationStrategyImpl();
+
     public void init(FilterConfig filterConfig, Class<? extends Filter> filterClazz) {
         this.webXmlConfigurationStrategy.init(filterConfig, filterClazz);
         this.jndiConfigurationStrategy.init(filterConfig, filterClazz);
+        this.propertiesConfigurationStrategy.init(filterConfig, filterClazz);
     }
 
     protected String get(final ConfigurationKey key) {
-        final String value1 = this.webXmlConfigurationStrategy.get(key);
+        String value1 = this.webXmlConfigurationStrategy.get(key);
 
         if (CommonUtils.isNotBlank(value1)) {
             return value1;
         }
-
-        return this.jndiConfigurationStrategy.get(key);
+        
+        value1 = this.jndiConfigurationStrategy.get(key);
+        if (CommonUtils.isNotBlank(value1)) {
+            return value1;
+        }
+        
+        return this.propertiesConfigurationStrategy.get(key);
     }
 }
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/configuration/PropertiesConfigurationStrategyImpl.java b/cas-client-core/src/main/java/org/jasig/cas/client/configuration/PropertiesConfigurationStrategyImpl.java
index 5dd7dd9..d4ea05a 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/configuration/PropertiesConfigurationStrategyImpl.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/configuration/PropertiesConfigurationStrategyImpl.java
@@ -24,7 +24,6 @@
 
 import javax.servlet.Filter;
 import javax.servlet.FilterConfig;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.Properties;
@@ -44,7 +43,7 @@
     /**
      * Default location of the configuration file.  Mostly for testing/demo.  You will most likely want to configure an alternative location.
      */
-    private static final String DEFAULT_CONFIGURATION_FILE_LOCATION = "/etc/java-cas-client.properties";
+    private static final String DEFAULT_CONFIGURATION_FILE_LOCATION = "plugins/cas/config/cas-client.properties";
 
     private static final Logger LOGGER = LoggerFactory.getLogger(PropertiesConfigurationStrategyImpl.class);
 
@@ -67,6 +66,11 @@
     }
 
     public void init(final FilterConfig filterConfig, final Class<? extends Filter> filterClazz) {
+        if (filterConfig == null || filterClazz == null) {
+            final boolean defaultConfigFileLoaded = loadPropertiesFromFile(DEFAULT_CONFIGURATION_FILE_LOCATION);
+            CommonUtils.assertTrue(defaultConfigFileLoaded, "unable to load properties to configure CAS client");
+            return;
+        }
         this.simpleFilterName = filterClazz.getSimpleName();
         final String fileLocationFromFilterConfig = filterConfig.getInitParameter(CONFIGURATION_FILE_LOCATION);
         final boolean filterConfigFileLoad = loadPropertiesFromFile(fileLocationFromFilterConfig);
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/ssl/HttpsURLConnectionFactory.java b/cas-client-core/src/main/java/org/jasig/cas/client/ssl/HttpsURLConnectionFactory.java
index cede908..c6513d5 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/ssl/HttpsURLConnectionFactory.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/ssl/HttpsURLConnectionFactory.java
@@ -22,9 +22,15 @@
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
 import java.security.KeyStore;
+import java.security.cert.X509Certificate;
 import java.util.Properties;
 import javax.net.ssl.*;
+
+import org.jasig.cas.client.configuration.ConfigurationKeys;
+import org.jasig.cas.client.configuration.ConfigurationStrategy;
+import org.jasig.cas.client.configuration.PropertiesConfigurationStrategyImpl;
 import org.jasig.cas.client.util.CommonUtils;
+import org.jasig.cas.client.util.ReflectUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -48,14 +54,20 @@
      * Hostname verifier used when making an SSL request to the CAS server.
      * Defaults to {@link HttpsURLConnection#getDefaultHostnameVerifier()}
      */
-    private HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
-
+    private HostnameVerifier hostnameVerifier;
+    
+    private static HostnameVerifier defaultHostnameVerifier = getDefaultHostnameVerifier();
+    
     /**
      * Properties file that can contains key/trust info for Client Side Certificates
      */
-    private Properties sslConfiguration = new Properties();
-
+    private Properties sslConfiguration;
+    
+    private static Properties defaultSSLConfiguration = getDefaultSSLConfig();
+    
     public HttpsURLConnectionFactory() {
+        hostnameVerifier = defaultHostnameVerifier;
+        sslConfiguration = defaultSSLConfiguration;
     }
 
     public HttpsURLConnectionFactory(final HostnameVerifier verifier, final Properties config) {
@@ -92,18 +104,46 @@
     private HttpURLConnection configureHttpsConnectionIfNeeded(final URLConnection conn) {
         if (conn instanceof HttpsURLConnection) {
             final HttpsURLConnection httpsConnection = (HttpsURLConnection) conn;
-            final SSLSocketFactory socketFactory = this.createSSLSocketFactory();
-            if (socketFactory != null) {
-                httpsConnection.setSSLSocketFactory(socketFactory);
-            }
-
+            SSLSocketFactory socketFactory = null;
             if (this.hostnameVerifier != null) {
                 httpsConnection.setHostnameVerifier(this.hostnameVerifier);
             }
+            if (httpsConnection.getHostnameVerifier() != null && httpsConnection.getHostnameVerifier() instanceof AnyHostnameVerifier) {
+                try {
+                    socketFactory = getFriendlyToAllSSLSocketFactory();
+                } catch (Exception e) {
+                    socketFactory = this.createSSLSocketFactory();
+                }
+            } else {
+                socketFactory = this.createSSLSocketFactory();
+            }
+            if (socketFactory != null) {
+                httpsConnection.setSSLSocketFactory(socketFactory);
+            }
         }
         return (HttpURLConnection) conn;
     }
 
+    private static SSLSocketFactory getFriendlyToAllSSLSocketFactory() throws Exception {
+        final TrustManager trm = new X509TrustManager() {
+            @Override
+            public X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+
+            @Override
+            public void checkClientTrusted(final X509Certificate[] certs, final String authType) {
+            }
+
+            @Override
+            public void checkServerTrusted(final X509Certificate[] certs, final String authType) {
+            }
+        };
+        final SSLContext sc = SSLContext.getInstance("SSL");
+        sc.init(null, new TrustManager[]{trm}, null);
+        return sc.getSocketFactory();
+    }
+    
     /**
      * Creates a {@link SSLSocketFactory} based on the configuration specified
      * <p>
@@ -138,7 +178,6 @@
                     }
                 }
             }
-
         } catch (final Exception e) {
             LOGGER.error(e.getMessage(), e);
         } finally {
@@ -188,4 +227,62 @@
 
         this.sslConfiguration = (Properties) in.readObject();
     }
+
+    /**
+     * Extended for OFBiz-CAS which will not start cas-client filter,
+     * so the configurations are initialized here
+     */
+    private static ConfigurationStrategy configurationStrategy;
+    
+    /**
+     * Gets the ssl config to use for HTTPS connections
+     * if one is configured for this filter.
+     * @return Properties that can contains key/trust info for Client Side Certificates
+     */
+    private static Properties getDefaultSSLConfig() {
+        final Properties properties = new Properties();
+        final String fileName = getDefaultConfigurationStrategy().getString(ConfigurationKeys.SSL_CONFIG_FILE);
+        LOGGER.info("cas client SSL_CONFIG_FILE: " + fileName);
+
+        if (fileName != null) {
+            FileInputStream fis = null;
+            try {
+                fis = new FileInputStream(fileName);
+                properties.load(fis);
+                LOGGER.trace("Loaded {} entries from {}", properties.size(), fileName);
+            } catch (final IOException ioe) {
+                LOGGER.error(ioe.getMessage(), ioe);
+            } finally {
+                CommonUtils.closeQuietly(fis);
+            }
+        }
+        return properties;
+    }
+
+    /**
+     * Gets the configured {@link HostnameVerifier} to use for HTTPS connections
+     * if one is configured for this filter.
+     * @return Instance of specified host name verifier or null if none specified.
+     */
+    private static HostnameVerifier getDefaultHostnameVerifier() {
+        final Class<? extends HostnameVerifier> className = getDefaultConfigurationStrategy().getClass(ConfigurationKeys.HOSTNAME_VERIFIER);
+        LOGGER.info("cas client HOSTNAME_VERIFIER: " + className);
+        final String config = getDefaultConfigurationStrategy().getString(ConfigurationKeys.HOSTNAME_VERIFIER_CONFIG);
+        if (className != null) {
+            if (config != null) {
+                return ReflectUtils.newInstance(className, config);
+            } else {
+                return ReflectUtils.newInstance(className);
+            }
+        }
+        return null;
+    }
+    
+    private static ConfigurationStrategy getDefaultConfigurationStrategy() {
+        if (configurationStrategy == null) {
+            configurationStrategy = new PropertiesConfigurationStrategyImpl();
+            configurationStrategy.init(null, null);
+        }
+        return configurationStrategy;
+    }
 }
